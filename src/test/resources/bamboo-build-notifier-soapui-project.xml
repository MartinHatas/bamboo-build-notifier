<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="72c4cd53-562c-4917-a98c-7953c575ad0a" activeEnvironment="Default" name="bamboo-build-notifier" resourceRoot="" soapui-version="5.2.1" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:restMockService id="0d0dd412-c327-4d5f-852a-f42ee845b2be" port="8085" path="/" host="localhost" name="bamboo-mock" docroot=""><con:settings/><con:properties/><con:restMockAction name="/rest/api/latest" method="GET" resourcePath="/rest/api/latest" id="6bfb6f36-f9af-488f-ae4b-204f234f9193"><con:settings/><con:defaultResponse>favourite-build</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="favourite-build" id="6dfd05fc-4a1d-4ccd-afe7-71ad4f3604b3" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "results": {
    "size": 1,
    "expand": "result",
    "start-index": 0,
    "max-result": 1,
    "result": [
      {
        "link": {
          "href": "http://localhost:8085/rest/api/latest/result/BAM-BBN-10",
          "rel": "self"
        },
        "plan": {
          "shortName": "Bamboo Build Notifier",
          "shortKey": "BBN",
          "type": "chain",
          "enabled": true,
          "link": {
            "href": "http://localhost:8085/rest/api/latest/plan/BAM-BBN",
            "rel": "self"
          },
         "key": "BAM-BBN",
         "name": "bamboo-build-notifier - Bamboo Build Notifier",
         "planKey": {
            "key": "BAM-BBN"
          }
        },
        "buildResultKey": "BAM-BBN-10",
        "lifeCycleState": "Finished",
        "id": 1081345,
        "key": "BAM-BBN-10",
        "planResultKey": {
          "key": "BAM-BBN-10",
          "entityKey": {
            "key": "BAM-BBN"
          },
          "resultNumber": 10
        },
        "state": "Failed",
        "buildState": "Successful",
        "number": 10,
        "buildNumber": 10
      }
    ]
  },
  "expand": "results",
  "link": {
    "href": "http://localhost:8085/rest/api/latest/result",
    "rel": "self"
  }
}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:sensitiveInformation/></con:soapui-project>